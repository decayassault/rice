using System.Collections.Generic;
using System;
using System.Net;
namespace Data
{
    public interface IMemory//напрямую в память обращаться нельзя - только из медленной части БД; разбить на интерфейсы
    {
        bool CheckIp(in IPAddress ip, in byte value);
        void ClearAccountIdentifierRemoteIps();
        Queue<AccountIdentifierRemoteIp> GetAccountIdentifierRemoteIps();
        void AccountIdentifierRemoteIpLogEnqueue(in AccountIdentifierRemoteIp value);
        void InitializeAccountIdentifierRemoteIpLog();
        void SetTimerIsWorkingFlag();
        void ResetTimerIsWorkingFlag();
        bool CheckIfTimerIsWorking();
        int GetPagesLength();
        int GetPos();
        void SetPos(in int value);
        int GetRegistrationLineCount();
        void DecrementAllRemoteIpHashesAttemptsCountersAndRemoveUnnecessaryByTimer();
        int GetPersonalMessagesToPublishCount();
        void InitializeRemoteIpHashesAttemptsCounter();
        string GetLastPage();
        IEnumerable<Pair> GetLoginPasswordHashesDeltaKeys();
        int GetTopicsToStartCount();
        int GetMessagesToPublishCount();
        string GetTemp();
        void SetTemp(in string value);
        int GetPreRegistrationLineCount();
        int GetCaptchaMessagesCount();
        int GetDialogsToStartCount();
        string GetCaptchaPageToReturn();
        int GetCaptchaMessagesRegistrationDataCount();
        bool SpecialSearch(in char c);
        int GetThreadsCount();
        void SetPageToReturnRegistrationData(in string value);
        string GetPageToReturnRegistrationData();
        bool LoginPasswordAccIdHashesContainsKey(in Pair pair);
        void LoginPasswordAccIdHashesAdd(in Pair pair, in int accountId);
        void LoginPasswordHashesDeltaRemove(in Pair pair, out byte result);
        void InitializeLoginPasswordAccIdHashes();
        void InitializeLoginPasswordHashes();
        bool CaptchaMessagesContains(in uint captcha);
        void InitializeLoginPasswordHashesDelta();
        bool LoginPasswordHashesContainsKey(in Pair pair);
        void LoginPasswordHashesAdd(in Pair pair, in Guid? guid);
        bool NicksHashesKeysContains(in uint hash);
        void InitializeNicksHashes();
        void NicksHashesAdd(in uint nickHash, in byte temp);
        string GetEndPointPageLocked(in int index);
        void SetEndPointPageLocked(in int index, in string value);
        void InitializeEndPointPagesLocked(in int size);
        string GetMainContentLocked();
        void SetMainContentLocked(in string value);
        string GetMainPageLocked();
        void SetMainPageLocked(in string value);
        void AddToMainPageLocked(in string value);
        void DialogsToStartEnqueue(in DialogData value);
        void InitializeDialogsToStart();
        DialogData DialogsToStartDequeue();
        void InitializePersonalMessagesToPublish();
        void PersonalMessagesToPublishEnqueue(in MessageData value);
        MessageData PersonalMessagesToPublishDequeue();
        string[] GetDialogPagesArrayLocked(in int index);
        void SetDialogPagesArrayLocked(in int index, in string[] value);
        void SetCaptchaPageToReturn(in string value);
        string GetDialogPagesPageLocked(in int arrayIndex, in int pageIndex);
        void SetDialogPagesPageLocked(in int arrayIndex, in int pageIndex, in string value);
        void AddToDialogPagesPageLocked(in int arrayIndex, in int pageIndex, in string value);
        void InitializeDialogPagesLocked(in string[][] value);
        int GetDialogPagesLengthLocked();
        void SetDialogPagesLengthLocked(in int value);
        void CopyDialogPagesArraysToIncreasedSizeArraysAndFillGapsLocked();
        void SetDialogPagesPageDepthLocked(in int index, in int value);
        int GetDialogPagesPageDepthLocked(in int index);
        void InitializeDialogPagesPageDepthLocked(in int[] value);
        string GetMessage(in int ownerId, in int companionId, in int messageId);
        string[] GetMessages(in int ownerId, in int companionId);
        void AddToPersonalPagesDepth(in int id, in int accountId);
        int GetPersonalPagesDepth(in int id, in int accountId);
        void SetPersonalPagesPage
                    (in int id, in int accountId, in int depth, in string page);
        void SetPersonalPagesMessagesArray
                        (in int id, in int accountId, in string[] value);
        void InitializePrivateMessages();
        bool PersonalPagesContainsKey(in OwnerId ownerId, in CompanionId companionId, in bool flag);
        void PersonalPagesAdd(in OwnerId ownerId, in CompanionId companionId, in string[] newMsg, in bool flag);
        bool PersonalPagesDepthsContainsKey(in OwnerId ownerId, in CompanionId companionId, in bool flag);
        void PersonalPagesDepthsAdd(in OwnerId ownerId, in CompanionId companionId, in bool flag);
        bool PersonalPagesDepthsKeysContains(in OwnerId ownerId);
        bool PersonalPagesKeysContains(in OwnerId ownerId);
        int GetPersonalPagesPageDepth(in int accountId, in int companionId);
        void PersonalPagesAdd(in OwnerId ownerId, in Dictionary<CompanionId, PrivateMessages> temp1);
        void PersonalPagesDepthsAdd(in OwnerId ownerId,
                                                    in Dictionary<CompanionId, int> temp2);
        string[] GetSectionPagesArrayLocked(in int index);
        void SetSectionPagesArrayLocked(in int index, in string[] value);
        string GetSectionPagesPageLocked(in int arrayIndex, in int pageIndex);
        void SetSectionPagesPageLocked(in int arrayIndex, in int pageIndex, in string value);
        void AddToSectionPagesPageLocked(in int arrayIndex, in int pageIndex, in string value);
        void InitializeSectionPagesLocked(in string[][] value);
        int GetSectionPagesLengthLocked();
        void SetSectionPagesLengthLocked(in int value);
        void SetSectionPagesPageDepthLocked(in int index, in int value);
        int GetSectionPagesPageDepthLocked(in int index);
        void InitializeSectionPagesPageDepthLocked(in int[] value);
        void InitializeTopicsToStart();
        void SetSectionPagesArray(in int endpointId);
        void SetThreadsCount(in int threadsCount);
        void SetPages(in string[] temp);
        void SetLastPage(in string value);
        string GetPage(in int num);
        void SetPage(in int index, in string value);
        void TopicsToStartEnqueue(in TopicData value);
        string[] GetPages();
        TopicData TopicsToStartDequeue();
        void SetThreadPagesPageLocked(in int arrayIndex, in int pageIndex, in string value);
        string GetThreadPagesPageLocked(in int arrayIndex, in int pageIndex);
        string[] GetThreadPagesArrayLocked(in int arrayIndex);
        bool ThreadPagesContainsThreadIdLocked(in int threadId);
        void SetThreadPagesArrayLocked(in int arrayIndex, in string[] value);
        void AddToThreadPagesPageLocked(in int arrayIndex, in int pageIndex, in string value);
        Dictionary<int, string[]> GetThreadPagesLocked();
        int GetThreadPagesPageDepthLocked(in int index);
        void AddToThreadPagesPageDepthLocked(in int index, in int value);
        void CorrectMessagesArray
            (Func<int, int, string, int, string, string, string> GetNewPage, in int endpointId, in int threadId, in string message,
                in int accountId, in string threadName, in string nick);
        void SetThreadPagesPageDepthLocked(in int index, in int value);
        void InitializeThreadPagesPageDepthLocked(in int threadsCount);
        void InitializeThreadPagesLocked(in int threadsCount);
        void InitializePreSaveProfilesLine();
        int GetProfilesOnPreSaveLineCount();
        void PreSaveProfilesLineEnqueueLocked(in PreProfile preProfile);
        void InitializeMessagesToPublish();
        string GetOwnProfilePage(in int accountId);
        PreProfile PreSaveProfilesLineDequeueLocked();
        IEnumerable<int> IterateThroughAccountIds();
        string GetPublicProfilePage(in int accountId);
        void AddOrUpdateOwnProfilePage(in int accountId, in string page);
        void AddOrUpdatePublicProfilePage(in int accountId, in string page);
        void MessagesToPublishEnqueue(in MessageData messageData);
        MessageData MessagesToPublishDequeue();
        char GetNextRandomCaptchaSymbol();
        void InitializeRandom();
        void InitializeOwnProfilePages();
        void InitializePublicProfilePages();
        int GetLoginPasswordAccIdHashes(in Pair pair);
        void PreRegistrationLineAdd(in int val, in PreRegBag bag);
        void InitializePreRegistrationLine();
        void InitializeRegistrationLine();
        void CaptchaMessagesRegistrationDataEnqueue(in uint toQueue);
        void CaptchaMessagesRegistrationDataDequeue();
        void InitializeCaptchaMessagesRegistrationData();
        bool CaptchaMessagesRegistrationDataContains(in uint captcha);
        void RegistrationLineRemove(in int i, out RegBag regBag);
        void PreRegistrationLineRemove(in int key, out PreRegBag preRegBag);
        bool LoginPasswordHashesDeltaContainsKey(in Pair pair);
        void LoginPasswordHashesDeltaAdd(in Pair pair, in byte val);
        void RegistrationLineAdd(in int val, in RegBag regBag);
        void CaptchaMessagesEnqueue(in uint toQueue);
        void InitializeCaptchaMessages();
        void CaptchaMessagesDequeue();
        bool LoginPasswordHashesValuesContains(in Guid guid);
        void SetLoginPasswordHashesPairToken(in Pair pair, in Guid? token);
        void LoginPasswordHashesThroughIterationCheck(ref Pair pair, in Guid guid);
        Tuple<bool, int> CheckGuidAndGetOwnerAccountId(Guid guid);
    }
}